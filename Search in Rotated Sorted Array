// # Search in Rotated Sorted Array
// # Question Link - https://leetcode.com/problems/search-in-rotated-sorted-array/
// # Solution 


#include <bits/stdc++.h>

using namespace std;


    int search(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid] == target){
                return mid;
            }
            if(nums[low] <= nums[mid]){
                if(nums[low]<=target && nums[mid]>=target){
                    high = mid -1;
                }
                else{
                    low = mid +1;
                }
            }
            else{
                if(nums[mid]<=target && nums[high]>= target){
                    low = mid +1;
                }
                else{
                    high = mid - 1;
                }
            }

        }
        return -1;
    }


int main()
{
    int n;
    cin>>n;
    int target;
    cin>>target;
    vector<int> a(n);
    for(int i=0;i<n;i++){
        cin>>a[i];
    }
   cout<<search(a,target);
    return 0;
}


// # Leetcode Solution -
/*
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size()-1;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid] == target){
                return mid;
            }
            if(nums[low] <= nums[mid]){
                if(nums[low]<=target && nums[mid]>=target){
                    high = mid -1;
                }
                else{
                    low = mid +1;
                }
            }
            else{
                if(nums[mid]<=target && nums[high]>= target){
                    low = mid +1;
                }
                else{
                    high = mid - 1;
                }
            }

        }
        return -1;
    }
};

*/
