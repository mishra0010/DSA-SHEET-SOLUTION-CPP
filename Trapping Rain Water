// # Question - Trapping rain Water
// # Ques Link - https://leetcode.com/problems/trapping-rain-water/description/
// # Solution  - 


#include <bits/stdc++.h>

using namespace std;

int main()
{
    int n;
    cin>>n;
    vector<int> v(n);
    for(int i=0;i<n;i++){
        cin>>v[i];
    }
    vector<int>vLeft(n);
    vector<int>vRight(n);
    vLeft[0] = v[0];
    for(int i=1;i<n;i++){
        vLeft[i] = max(vLeft[i-1],v[i]);
    }
    vRight[n-1] = v[n-1];
    for(int i = n-2;i>=0;i--){
        vRight[i] = max(vRight[i+1],v[i]);
    }
    int ans = 0;
    for(int i=0;i<n;i++){
        ans += min(vRight[i],vLeft[i]) - v[i];
    }
    cout<<ans;

    return 0;
}
// # Leetcode Solution -
/*
class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size();
        vector<int> left(size);
        vector<int> right(size);
        left[0] = height[0];
        for(int i=1;i<size;i++){
            left[i] = max(left[i-1],height[i]);
        }
        right[size-1] = height[size-1];
        for(int i=size-2;i>=0;i--){
            right[i] = max(right[i+1],height[i]);
        }
        int ans =0;
        for(int i=0;i<size;i++){
           ans += min(right[i],left[i]) - height[i];
        }
        return ans;
    }
};

*/
